/**
 * Main CAmkES configuration file of the exercise demo application.
 *
 * Copyright (C) 2021, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

#include "system_config.h"

//----------------------------------------------------------------------
// Timer
//----------------------------------------------------------------------

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

//----------------------------------------------------------------------
// Storage
//----------------------------------------------------------------------

#include "RPi_SPI_Flash/RPi_SPI_Flash.camkes"
RPi_SPI_Flash_COMPONENT_DEFINE(RPi_SPI_Flash)
RPi_SPI_Flash_HW_COMPONENT_DEFINE(RPi_SPI_Flash_HW)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DEFINE(StorageServer)

//----------------------------------------------------------------------
// Network
//----------------------------------------------------------------------

#include "NIC_RPi/NIC_RPi.camkes"
NIC_RPi_COMPONENT_DEFINE(NIC_RPi, NIC_DRIVER_RINGBUFFER_SIZE)
NIC_RPi_Mailbox_COMPONENT_DEFINE(NIC_RPi_Mailbox)
NIC_RPi_USB_COMPONENT_DEFINE(NIC_RPi_USB)

//----------------------------------------------------------------------
// Ticker
//----------------------------------------------------------------------

import "components/Ticker/Ticker.camkes";

//----------------------------------------------------------------------
// Network Stack
//----------------------------------------------------------------------

import "components/NetworkStack/NetworkStack.camkes";
#include "include/util/loop_defines.h"

import "components/TestApp/TestApp.camkes";

//----------------------------------------------------------------------
// System
//----------------------------------------------------------------------

assembly {
    composition {
        //----------------------------------------------------------------------
        // Storage
        //----------------------------------------------------------------------
        component   RPi_SPI_Flash       flash;
        component   RPi_SPI_Flash_HW    flash_hw;

        RPi_SPI_Flash_INSTANCE_CONNECT(
            flash,
            flash_hw
        )

        //----------------------------------------------------------------------
        // StorageServer
        //----------------------------------------------------------------------
        component   StorageServer       storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            flash.storage_rpc, flash.storage_port
        )

        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            testApp.storage_rpc_1, testApp.storage_dp_1,
            testApp.storage_rpc_2, testApp.storage_dp_2
        )

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            flash.timeServer_rpc, flash.timeServer_notify,
            nic.timeServer_rpc, nic.timeServer_notify,
            ticker.timeServer_rpc, ticker.timeServer_notify,
            nwStack.timeServer_rpc, nwStack.timeServer_notify
        )

        //----------------------------------------------------------------------
        // Ethernet Driver
        //----------------------------------------------------------------------
        component NIC_RPi           nic;
        component NIC_RPi_Mailbox   nic_mailbox;
        component NIC_RPi_USB       nic_usb;

        NIC_RPi_INSTANCE_CONNECT(
            nic,
            nic_mailbox,
            nic_usb
        )

        //----------------------------------------------------------------------
        // Ticker
        // It's a very pragmatic approach to create a 1 second tick for each
        // network stack. Actually, we don't need this, because the TimeServer
        // should provide two timers per client, one for timeouts and one for
        // the periodic tick.
        //----------------------------------------------------------------------
        component Ticker ticker;
        connection seL4NotificationNative nwStack_tick (from ticker.nwStack_event_tick, to nwStack.event_tick_or_data);

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NetworkStack                nwStack;

#define COMPONENT nwStack
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4Notification GEN_NAME(COMPONENT, _a)(from COMPONENT.GEN_ID(e_write), to COMPONENT.GEN_ID(c_write)); \
        connection seL4Notification GEN_NAME(COMPONENT, _b)(from COMPONENT.GEN_ID(e_read), to COMPONENT.GEN_ID(c_read));   \
        connection seL4Notification GEN_NAME(COMPONENT, _c)(from COMPONENT.GEN_ID(e_conn), to COMPONENT.GEN_ID(c_conn));
#include "include/util/loop.h"
#undef COMPONENT

        NIC_RPi_INSTANCE_CONNECT_CLIENT(
            nic,
            nwStack.nic_driver, nwStack.nic_port_to, nwStack.nic_port_from, nwStack.event_tick_or_data
        )

        //----------------------------------------------------------------------
        // Demo Component (using File System and Networking)
        //----------------------------------------------------------------------
        component   TestApp      testApp;

        connection seL4Notification     NwAppInitDone               (from nwStack.nwStack_event_ready, to testApp.event_network_stack_init_done);
        connection seL4RPCCall          testApp_nwStack             (from testApp.network_stack_rpc, to nwStack.network_stack_rpc);

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(testApp, nwStack)(from testApp.GEN_ID(NwAppDataPort), to nwStack.GEN_ID(nwStack_port));
#include "include/util/loop.h"
    }

    configuration {

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            FILESYSTEM_1_STORAGE_OFFSET, FILESYSTEM_1_STORAGE_SIZE,
            FILESYSTEM_2_STORAGE_OFFSET, FILESYSTEM_2_STORAGE_SIZE
        )

        StorageServer_CLIENT_ASSIGN_BADGES(
            testApp.storage_rpc_1,
            testApp.storage_rpc_2
        )

        TimeServer_CLIENT_ASSIGN_BADGES(
            flash.timeServer_rpc,
            nic.timeServer_rpc,
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc
        )

        RPi_SPI_Flash_HW_INSTANCE_CONFIGURE_SELF(
            flash_hw
        )

        NIC_RPi_Mailbox_INSTANCE_CONFIGURE_SELF(
            nic_mailbox
        )

        NIC_RPi_USB_INSTANCE_CONFIGURE_SELF(
            nic_usb
        )

        NIC_RPi_INSTANCE_CONFIGURE(
            nic,
            4*40960
        )
    }
}